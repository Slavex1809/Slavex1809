{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1XP0dsb-T3ORPYv4YQFV5j23PknFH06O6","timestamp":1736023094037}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"MXXTuy_o0sjk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736023175339,"user_tz":-240,"elapsed":17815,"user":{"displayName":"Вячеслав Дмитриев","userId":"02522684148602988491"}},"outputId":"dda1ab4c-f880-4ee9-84dc-459d575e3c3e"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/1.9 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.9/1.9 MB\u001b[0m \u001b[31m24.8 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m28.8 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m24.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m16.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m953.8/953.8 kB\u001b[0m \u001b[31m21.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m840.2/840.2 kB\u001b[0m \u001b[31m21.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m178.7/178.7 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}],"source":["!pip install -q -U kaggle_environments"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import random\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from kaggle_environments import make, evaluate"],"metadata":{"id":"yz23vWHD0wcj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736023208329,"user_tz":-240,"elapsed":26115,"user":{"displayName":"Вячеслав Дмитриев","userId":"02522684148602988491"}},"outputId":"7f06c119-1730-43ea-b9ff-f7ae2d526c3b"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pygame/pkgdata.py:25: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n","  from pkg_resources import resource_stream, resource_exists\n","/usr/local/lib/python3.10/dist-packages/pkg_resources/__init__.py:3154: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google')`.\n","Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n","  declare_namespace(pkg)\n","/usr/local/lib/python3.10/dist-packages/pkg_resources/__init__.py:3154: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n","Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n","  declare_namespace(pkg)\n","/usr/local/lib/python3.10/dist-packages/pkg_resources/__init__.py:3154: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('sphinxcontrib')`.\n","Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n","  declare_namespace(pkg)\n","/usr/local/lib/python3.10/dist-packages/tensorflow/lite/python/util.py:55: DeprecationWarning: jax.xla_computation is deprecated. Please use the AOT APIs; see https://jax.readthedocs.io/en/latest/aot.html. For example, replace xla_computation(f)(*xs) with jit(f).lower(*xs).compiler_ir('hlo'). See CHANGELOG.md for 0.4.30 for more examples.\n","  from jax import xla_computation as _xla_computation\n"]}]},{"cell_type":"markdown","source":["Опишем поведение агента, всегда играющего \"камень\" - это значение 0"],"metadata":{"id":"0kuo6IOxiRub"}},{"cell_type":"code","source":["%%writefile rock_agent.py\n","\n","#Example of the simple agent\n","#0 - rock\n","#1 - paper\n","#2 - scissors\n","def your_agent(observation, configuration):\n","    return 0"],"metadata":{"id":"bqTqV7B92rJ6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736023219989,"user_tz":-240,"elapsed":421,"user":{"displayName":"Вячеслав Дмитриев","userId":"02522684148602988491"}},"outputId":"c41835d8-bff4-4684-c943-e4f00157b9d1"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing rock_agent.py\n"]}]},{"cell_type":"markdown","source":["Попробуем теперь использовать информацию о прошлых действиях противника. Опишем агента, который производит то же самое действие, что и оппонент на прошлом ходу"],"metadata":{"id":"et1J5hUGigeh"}},{"cell_type":"code","source":["%%writefile copy_opponent.py\n","\n","#Example\n","def copy_opponent(observation, configuration):\n","    #in case we have information about opponent last move\n","    if observation.step > 0:\n","        return observation.lastOpponentAction\n","    #initial step\n","    else:\n","        return random.randrange(0, configuration.signs)"],"metadata":{"id":"7l6Ttw6qi0jk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736023225196,"user_tz":-240,"elapsed":414,"user":{"displayName":"Вячеслав Дмитриев","userId":"02522684148602988491"}},"outputId":"6b41bf09-55d9-4e6d-d04b-149f00d90b06"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing copy_opponent.py\n"]}]},{"cell_type":"markdown","source":["Воспользуемся функцией evaluate из библиотеки kaggle_environments с помощью которой запустим наших агентов и проведем эксперимент на заданном количестве игр"],"metadata":{"id":"ExgIpXUVjbjN"}},{"cell_type":"code","source":["evaluate(\n","    \"rps\", #environment to use - no need to change\n","    [\"rock_agent.py\", \"copy_opponent.py\"], #agents to evaluate\n","    configuration={\"episodeSteps\": 100} #number of episodes\n",")"],"metadata":{"id":"wv6Ip6M004xa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736023229194,"user_tz":-240,"elapsed":406,"user":{"displayName":"Вячеслав Дмитриев","userId":"02522684148602988491"}},"outputId":"6f87d201-e062-4f97-eb96-cdc173bd5972"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[1, None]]"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["evaluate(\n","    \"rps\", #environment to use - no need to change\n","    [\"rock_agent.py\", \"paper\"], #agents to evaluate\n","    configuration={\"episodeSteps\": 100} #number of episodes\n",")"],"metadata":{"id":"FC6_QWe9k3rr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736023233810,"user_tz":-240,"elapsed":604,"user":{"displayName":"Вячеслав Дмитриев","userId":"02522684148602988491"}},"outputId":"076f5eac-82d7-4b8b-9f91-d2a9830aa7bb"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[-99.0, 99.0]]"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Определяем агентов со стратегиями\n","\n","# 1. Агент всегда играет \"камень\"\n","def always_rock(observation, configuration):\n","    return 0\n","\n","# 2. Агент всегда играет \"бумагу\"\n","def always_paper(observation, configuration):\n","    return 1\n","\n","# 3. Агент всегда играет \"ножницы\"\n","def always_scissors(observation, configuration):\n","    return 2\n","\n","# 4. Агент с случайным выбором\n","def random_agent(observation, configuration):\n","    return random.choice([0, 1, 2])\n","\n","# 5. Циклический агент\n","def cycle_agent(observation, configuration):\n","    return observation.step % 3\n","\n","# 6. Антициклический агент\n","def anti_cycle_agent(observation, configuration):\n","    return (2 - observation.step % 3)\n","\n","# 7. Имитация предыдущего хода противника\n","def copy_opponent(observation, configuration):\n","    if observation.step > 0:\n","        return observation.lastOpponentAction\n","    return 0\n","\n","# 8. Агент, играющий противоположность предыдущего хода противника\n","def counter_opponent(observation, configuration):\n","    if observation.step > 0:\n","        return (observation.lastOpponentAction + 1) % 3\n","    return 0\n","\n","# 9. Агент двойной камень, потом бумага\n","def double_rock_then_paper(observation, configuration):\n","    if observation.step % 3 < 2:\n","        return 0\n","    return 1\n","\n","# 10. Агент двойная бумага, потом ножницы\n","def double_paper_then_scissors(observation, configuration):\n","    if observation.step % 3 < 2:\n","        return 1\n","    return 2\n","\n","# 11. Последовательный случайный агент\n","def sequential_random(observation, configuration):\n","    if observation.step > 0 and random.random() < 0.7:\n","        return observation.lastOpponentAction\n","    return random.choice([0, 1, 2])\n","\n","# 12. Агент с трендом — выбирает ход, чаще всего использованный противником\n","def trend_agent(observation, configuration):\n","    if observation.step == 0:\n","        return random.choice([0, 1, 2])\n","\n","    # Анализ предыдущих ходов противника\n","    counts = [0, 0, 0]\n","    for move in observation['opponent_history']:\n","        counts[move] += 1\n","    most_common = counts.index(max(counts))\n","    return (most_common + 1) % 3\n","\n","# Собираем всех агентов в словарь\n","agents = {\n","    \"Always Rock\": always_rock,\n","    \"Always Paper\": always_paper,\n","    \"Always Scissors\": always_scissors,\n","    \"Random Agent\": random_agent,\n","    \"Cycle Agent\": cycle_agent,\n","    \"Anti-cycle Agent\": anti_cycle_agent,\n","    \"Copy Opponent\": copy_opponent,\n","    \"Counter Opponent\": counter_opponent,\n","    \"Double Rock Then Paper\": double_rock_then_paper,\n","    \"Double Paper Then Scissors\": double_paper_then_scissors,\n","    \"Sequential Random\": sequential_random,\n","    \"Trend Agent\": trend_agent\n","}\n","\n","# Функция для проведения турнира между агентами\n","def run_tournament(agents):\n","    # Создаем среду \"камень-ножницы-бумага\"\n","    env = make(\"rps\", configuration={\"episodeSteps\": 100})\n","    results = {name: 0 for name in agents}  # Словарь для хранения результатов\n","\n","    # Проводим турнир: каждый агент играет с каждым\n","    for agent1_name, agent1 in agents.items():\n","        for agent2_name, agent2 in agents.items():\n","            if agent1_name == agent2_name:\n","                continue  # Агент не играет сам с собой\n","\n","            # Настройка окружения для игры между двумя агентами\n","            env.reset()\n","            # Запуск игры между agent1 и agent2\n","            outcome = env.run([agent1, agent2])\n","            final_state = outcome[-1]  # Последний шаг\n","\n","            # Анализируем результат\n","            reward_1 = final_state[0][\"reward\"] if final_state[0][\"reward\"] is not None else 0\n","            reward_2 = final_state[1][\"reward\"] if final_state[1][\"reward\"] is not None else 0\n","\n","            # Обновляем счет\n","            if reward_1 > reward_2:\n","                results[agent1_name] += 1\n","            elif reward_1 < reward_2:\n","                results[agent2_name] += 1\n","\n","    return results\n","\n","# Запускаем турнир и выводим результаты\n","if __name__ == \"__main__\":\n","    tournament_results = run_tournament(agents)\n","    # Сортируем результаты для наглядности\n","    sorted_results = sorted(tournament_results.items(), key=lambda x: x[1], reverse=True)\n","\n","    print(\"Результаты турнира:\")\n","    for agent, score in sorted_results:\n","        print(f\"{agent}: {score} побед\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bHixJC4kDXku","executionInfo":{"status":"ok","timestamp":1736023380458,"user_tz":-240,"elapsed":33134,"user":{"displayName":"Вячеслав Дмитриев","userId":"02522684148602988491"}},"outputId":"9a75f085-a3e4-42c2-f25c-644a4bcce87e"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Результаты турнира:\n","Counter Opponent: 10 побед\n","Double Paper Then Scissors: 10 побед\n","Cycle Agent: 8 побед\n","Double Rock Then Paper: 8 побед\n","Always Paper: 6 побед\n","Always Scissors: 6 побед\n","Anti-cycle Agent: 6 побед\n","Always Rock: 4 побед\n","Copy Opponent: 4 побед\n","Sequential Random: 4 побед\n","Random Agent: 2 побед\n","Trend Agent: 0 побед\n"]}]}]}